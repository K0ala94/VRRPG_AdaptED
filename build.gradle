// Top-level build file where you can add configuration options common to all sub-projects/modules.
def APP_VERSION = "1.0.0"
ext.set('AppVersion', APP_VERSION)

buildscript {
    repositories {
        maven { url 'https://maven.google.com' }
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'me.tatarka:gradle-retrolambda:3.6.1'
        classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.2'
        classpath 'com.google.gms:google-services:3.0.0'
        classpath "io.realm:realm-gradle-plugin:3.3.2"
        classpath 'io.fabric.tools:gradle:1.+'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        maven { url 'https://maven.google.com' }
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

apply plugin: 'org.sonarqube'

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.modules", "AuthCommLib,CommonLib,Framework,GameLib,RandomGame"
    }
}

subprojects {
    // recommend to specify the flavor once and dynamically adapt paths to it
    def flavor = "debug" // flavor we want to have tested. Should be static
    def Flavor = "Debug" // flavor again, but starting with upper case

// noinspection is used to remove some "warnings" from Android Studio
    sonarqube {
        //noinspection GroovyAssignabilityCheck
        properties {
            /* SonarQube needs to be informed about your libraries and the android.jar to understand that methods like
             * onResume() is called by the Android framework. Without that information SonarQube will very likely create warnings
             * that those methods are never used and they should be removed. Same applies for libraries where parent classes
             * are required to understand how a class works and is used. */
            def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-25/android.jar,"

            property "sonar.host.url", "http://localhost:9000"
            property "sonar.projectKey", "AdaptedV2" // some shortcut name
            property "sonar.projectName", "Adapted Framework V2"
            property "sonar.projectVersion", AppVersion

            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.sources", "src/main/java,src/main/res" // first defines where the java files are, the second where the xml files are
            property "sonar.binaries", "build/intermediates/classes/debug"
            property "sonar.libraries", libraries
            property "sonar.java.binaries", "build/intermediates/classes/debug"
            property "sonar.java.libraries", libraries

            property "sonar.tests", "src/test/java" // where the tests are located
            property "sonar.java.test.binaries", "build/intermediates/classes/debug"
            property "sonar.java.test.libraries", libraries

            property "sonar.scm.provider", "git"

            property "sonar.jacoco.reportPath", "build/jacoco/testDebugUnitTest.exec" // path to coverage reports
            property "sonar.java.coveragePlugin", "jacoco"
            property "sonar.junit.reportsPath", "build/test-results/Debug" // path to junit reports
            property "sonar.android.lint.report", "build/outputs/lint-results-Debug.xml" // path to lint reports
        }
    }
}

task sonarComplete(type: Exec) {
    workingDir "./"
    def command = "gradlew.bat"
    commandLine command, "clean", "assembleDebug", "lintDebug","jacocoTestReport", "sonarqube"
}


